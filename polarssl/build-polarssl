#!/usr/bin/env bash
#
# Parameters:
#   TARGET -- use $TARGET.cmake as toolchain file
#   AES_NI=1 -- enable AES_NI processor optimization
#   EXTERNAL_RNG=1 -- disable all internal RNG implementations (caller must provide)
#   ENABLE_TESTING=1 -- run PolarSSL test scripts after build
#   VERBOSE=1 -- see build commands
#   NO_OPENSSL=1 -- don't merge polar-openssl.patch
#   NO_WIPE=1 -- don't wipe source tree and reunzip tarball
#
# Examples:
#   AES_NI=1 $OVPN3_DIR/polarssl/build-polarssl
#   AES_NI=1 ENABLE_TESTING=1 VERBOSE=1 $OVPN3_DIR/polarssl/build-polarssl
#   TARGET=android $OVPN3_DIR/polarssl/build-polarssl

set -e
if [ -z "$OPENSSL_DIR" ]; then
    echo OPENSSL_DIR must be defined
    exit 1
fi

# extract the PolarSSL source
POLARSSL=polarssl-1.1.4
PD=$OVPN3_DIR/polarssl
DIST=polarssl-$PLATFORM

rm -rf $DIST
mkdir $DIST

if [ "$NO_WIPE" = "1" ]; then
    echo RETAIN existing source
    cd $POLARSSL
else
    echo WIPE and reunzip source
    rm -rf $POLARSSL
    tar xfz $DL/$POLARSSL-gpl.tgz

    cd $POLARSSL

    # delete makefiles (apparently not needed)
    rm $(find . -type f | grep Makefile)

    # patch it
    echo PATCH polarssl-enum.patch
    patch -p1 <$PD/polarssl-enum.patch
    echo PATCH polarssl-const-ciphersuite.patch
    patch -p1 <$PD/polarssl-const-ciphersuite.patch
    echo PATCH polarssl-epki.patch
    patch -p1 <$PD/polarssl-epki.patch
    #echo PATCH polarssl-invalid-mac.patch
    #patch -p1 <$PD/polarssl-invalid-mac.patch 

    # do the big polar-openssl patch
    if [ "$NO_OPENSSL" != "1" ]; then
	echo MERGING polar-openssl.patch
	patch -p1 <$PD/polar-openssl.patch
    fi

    # define configs
    cp $PD/config.h include/polarssl/
    cp $PD/CMakeLists.txt .
fi

# add special support for AES-NI?
OPT_AES_NI=""
if [ "$AES_NI" = "1" ]; then
    OPT_AES_NI="-DOPENSSL_AES_NI=1"
fi

# RNG
OPT_EXTERNAL_RNG=""
if [ "$EXTERNAL_RNG" = "1" ]; then
    OPT_EXTERNAL_RNG="-DEXTERNAL_RNG=1"
fi

# enable testing?
OPT_ENABLE_TESTING=""
if [ "$ENABLE_TESTING" = "1" ]; then
    OPT_ENABLE_TESTING="-DENABLE_TESTING=1"
fi

# configure target
OPT_TARGET=""
if [ "$TARGET" ]; then
    OPT_TARGET="-DCMAKE_TOOLCHAIN_FILE=$PD/$TARGET.cmake"
elif [ "$APPLE_FAMILY" = "1" ]; then
    OPT_TARGET="-DCMAKE_TOOLCHAIN_FILE=$PD/apple.cmake"
fi

# combine options
OPT="-DOPENSSL_DIR=$OPENSSL_DIR $OPT_AES_NI $OPT_EXTERNAL_RNG $OPT_ENABLE_TESTING $OPT_TARGET"
echo OPTIONS $OPT

# build it
pwd
cd ../$DIST
cmake $OPT ../$POLARSSL
if [ "$VERBOSE" = "1" ]; then
    make VERBOSE=1
else
    make
fi

# test it
if [ "$ENABLE_TESTING" = "1" ]; then
    make test
fi

# copy headers
cp -a ../$POLARSSL/include/polarssl include/
