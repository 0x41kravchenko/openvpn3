#!/usr/bin/env bash
# Example:
#   ./build-polarssl                   -> native build
#   TARGET=linux-arm ./build-polarssl  -> cross build for Linux ARM
#   TARGET=android ./build-polarssl    -> cross build for Android
# when TARGET is specified, use $TARGET.cmake as toolchain file
set -e
if [ -z "$OPENSSL_DIR" ]; then
    echo OPENSSL_DIR must be defined
    exit 1
fi

# extract the PolarSSL source
PD=$OVPN3_DIR/polarssl
export POLARSSL=polarssl-1.1.1
rm -rf $POLARSSL
tar xfz $DL/$POLARSSL-gpl.tgz

# patch it
cd $POLARSSL
patch -p1 <$PD/polarssl-enum.patch
patch -p1 <$PD/polarssl-const-ciphersuite.patch
patch -p1 <$PD/polarssl-epki.patch
patch -p1 <$PD/polar-openssl.patch
cp $PD/config.h include/polarssl/
cp $PD/CMakeLists.txt .

# delete makefiles (apparently not needed)
rm $(find . -type f | grep Makefile)

# add special support for AES-NI?
extra=include/polarssl/config-extra.h
echo "/* auto-generated by build-polarssl script */" >$extra
if [ "$AES_NI" = "1" ]; then
    echo "#define POLARSSL_USE_OPENSSL_AES_NI" >>$extra
fi

# build it
if [ "$TARGET" ]; then    
    if [ "$TARGET" != "none" ]; then
	cmake -DCMAKE_TOOLCHAIN_FILE=$PD/$TARGET.cmake . && make
    fi
else
    cmake . && make
fi
