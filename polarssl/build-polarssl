#!/usr/bin/env bash
# Examples:
#   AES_NI=1 $OVPN3_DIR/polarssl/build-polarssl
#   AES_NI=1 ENABLE_TESTING=1 VERBOSE=1 $OVPN3_DIR/polarssl/build-polarssl
#   TARGET=android $OVPN3_DIR/polarssl/build-polarssl
#
# when TARGET is specified, use $TARGET.cmake as toolchain file

set -e
if [ -z "$OPENSSL_DIR" ]; then
    echo OPENSSL_DIR must be defined
    exit 1
fi

# extract the PolarSSL source
PD=$OVPN3_DIR/polarssl
POLARSSL=polarssl-1.1.3
DIST=polarssl-$PLATFORM
rm -rf $POLARSSL $DIST
mkdir $DIST
tar xfz $DL/$POLARSSL-gpl.tgz
cd $POLARSSL

# delete makefiles (apparently not needed)
rm $(find . -type f | grep Makefile)

# patch it
patch -p1 <$PD/polarssl-enum.patch
patch -p1 <$PD/polarssl-const-ciphersuite.patch
patch -p1 <$PD/polarssl-epki.patch

# do the big polar-openssl patch
patch -p1 <$PD/polar-openssl.patch

# define configs
cp $PD/config.h include/polarssl/
cp $PD/CMakeLists.txt .

# add special support for AES-NI?
OPT_AES_NI=""
if [ "$AES_NI" = "1" ]; then
    OPT_AES_NI="-DOPENSSL_AES_NI=1"
fi

# enable testing?
OPT_ENABLE_TESTING=""
if [ "$ENABLE_TESTING" = "1" ]; then
    OPT_ENABLE_TESTING="-DENABLE_TESTING=1"
fi

# configure target
OPT_TARGET=""
if [ "$TARGET" ]; then
    OPT_TARGET="-DCMAKE_TOOLCHAIN_FILE=$PD/$TARGET.cmake"
elif [ "$APPLE_FAMILY" = "1" ]; then
    OPT_TARGET="-DCMAKE_TOOLCHAIN_FILE=$PD/apple.cmake"
fi

# combine options
OPT="-DOPENSSL_DIR=$OPENSSL_DIR $OPT_AES_NI $OPT_ENABLE_TESTING $OPT_TARGET"
echo OPTIONS $OPT

# build it
pwd
cd ../$DIST
cmake $OPT ../$POLARSSL
if [ "$VERBOSE" = "1" ]; then
    make VERBOSE=1
else
    make
fi

# test it
if [ "$ENABLE_TESTING" = "1" ]; then
    make test
fi

# copy headers
cp -a ../$POLARSSL/include/polarssl include/
