import os, re

from utils import *
from parms import PARMS

def compile_one_file(srcfile, incdirs):
    if PARMS['DEBUG']:
        dbg_rel_flags = "/Zi"
    else:
        dbg_rel_flags = "/O2"

    paths = {
        "srcfile" : srcfile,
        "incdirs" : ' '.join([r"/I %s" % (x,) for x in incdirs]),
        "dbg_rel_flags" : dbg_rel_flags,
        }

    vc_cmd(PARMS, r"cl /c /D_WIN32_WINNT=0x0600 /DNOMINMAX /D_CRT_SECURE_NO_WARNINGS %(incdirs)s /EHsc /MD /W3 %(dbg_rel_flags)s /nologo %(srcfile)s" % paths, arch=os.environ.get("ARCH"))

def build_asio(parms):
    print "**************** ASIO"
    with Cd(parms['BUILD']) as cd:
        with ModEnv('PATH', "%s\\bin;%s" % (parms.get('GIT'), os.environ['PATH'])):
            d = expand('asio', parms['DEP'], parms.get('LIB_VERSIONS'))

def build_polarssl(parms):
    print "**************** PolarSSL"
    with Cd(parms['BUILD']) as cd:
        with ModEnv('PATH', "%s\\bin;%s" % (parms.get('GIT'), os.environ['PATH'])):
            dist = os.path.realpath('polarssl')
            rmtree(dist)
            d = expand('polarssl', parms['DEP'], parms.get('LIB_VERSIONS'))
            if d.endswith("-gpl"):
                d = d[:-4]
            os.rename(d, dist)

            # copy our custom config.h
            cp(os.path.join(parms['OVPN3'], 'core', 'deps', 'polarssl', 'config.h'),
               os.path.join(dist, 'include', 'polarssl', 'config.h'))
            with open(os.path.join(dist, 'include', 'polarssl', 'openvpn-polarssl.h'), 'w') as f:
                f.write("// automatically generated by buildep.py\n#define POLARSSL_SELF_TEST\n")
                #f.write("#define POLARSSL_SSL_SRV_C\n") # needed to build test proto.cpp

            # compile the source files
            os.chdir(os.path.join(dist, "library"))
            obj = []
            for dirpath, dirnames, filenames in os.walk("."):
                for f in filenames:
                    if f.endswith(".c"):
                        compile_one_file(f, (r"..\include",))
                        obj.append(f[:-2]+".obj")
                break

            # collect object files into polarssl.lib
            vc_cmd(PARMS, r"lib /OUT:polarssl.lib " + ' '.join(obj))

def build_lz4(parms):
    print "**************** LZ4"
    with Cd(parms['BUILD']) as cd:
        with ModEnv('PATH', "%s\\bin;%s" % (parms.get('GIT'), os.environ['PATH'])):
            dist = os.path.realpath('lz4')
            rmtree(dist)
            d = expand('lz4', parms['DEP'], parms.get('LIB_VERSIONS'))
            os.rename(d, dist)
            os.chdir(dist)
            compile_one_file("lz4.c", ())
            vc_cmd(PARMS, r"lib /OUT:lz4.lib lz4.obj")

def build_jsoncpp(parms):
    if 'jsoncpp' in PARMS['LIB_VERSIONS']:
        print "**************** JSONCPP"
        with Cd(parms['BUILD']) as cd:
            with ModEnv('PATH', "%s\\bin;%s" % (parms.get('GIT'), os.environ['PATH'])):
                dist = os.path.realpath('jsoncpp')
                rmtree(dist)
                d = expand('jsoncpp', parms['DEP'], parms.get('LIB_VERSIONS'))
                os.rename(d, dist)
                os.chdir(dist)
                call(["python", "amalgamate.py"])
                os.chdir(os.path.join(dist, "dist"))
                compile_one_file("jsoncpp.cpp", (".",))
                vc_cmd(PARMS, r"lib /OUT:jsoncpp.lib jsoncpp.obj")

wipetree(PARMS['BUILD'])
wipetree(PARMS['DIST'])
build_asio(PARMS)
build_polarssl(PARMS)
build_lz4(PARMS)
build_jsoncpp(PARMS)
