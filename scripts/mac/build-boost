#!/usr/bin/env bash
set -e
. $O3/lib-versions
[ -z "$DL" ] && DL=~/Downloads
if [ "$NO_WIPE" != "1" ]; then
    echo WIPE and reunzip source
    rm -rf boost $BOOST_VERSION
    mkdir boost
    if [ "$SRCDIR" ]; then
	cp -a "$SRCDIR" $BOOST_VERSION
    else
	tar xfz $DL/$BOOST_VERSION.tar.gz
    fi
    cd $BOOST_VERSION
    #patch -p1 <$DL/asio-engine.patch

    for T in osx osx-dbg ios ios-dbg iossim iossim-dbg ; do
	TS="${T//-/}"
	. $O3/vars-$T
	cat >>tools/build/v2/user-config.jam <<EOF
using clang : $TS : clang++
            :
                <compileflags>"-Wno-unused-function $PLATFORM_FLAGS $OTHER_COMPILER_FLAGS $LIB_FPIC"
            ;
EOF
    done
    . $O3/vars-reset
    echo '********** BOOST CONFIG'
    tail -30 tools/build/v2/user-config.jam
    echo '********** END BOOST CONFIG'
    ./bootstrap.sh
else
    echo RETAIN existing source
    cd $BOOST_VERSION
fi
TARGETS=""
if [ "$OSX_ONLY" != "1" ]; then
    TARGETS="ios iosdbg iossim iossimdbg"
fi
TARGETS="$TARGETS osx osxdbg"

for target in $TARGETS ; do
    if [ "${target:(-3)}" == "dbg" ]; then
	variant=debug
	stage=stage-${target%dbg}-dbg
    else
	variant=release
	stage=stage-$target
    fi
    echo "************************ $target $variant $stage"
    cmd="./bjam -d2 toolset=clang-$target --stagedir=$stage --with-system --with-thread --with-atomic variant=$variant link=static threading=multi runtime-link=static"
    echo $cmd
    $cmd
done
mv stage-* ../boost/
cp -a boost ../boost/
exit 0
