#!/usr/bin/env bash
if [ -z "$1" ]; then
    echo "usage: ./build target"
    echo "options:"
    echo " DEBUG=1 -- enable debug"
    echo ' ECHO=1 -- show commands'
    echo " STRIP=1 -- strip binary"
    echo " STRICT=1 -- more warnings"
    echo " LTO=1 -- build with LTO"
    echo " GPROF=1 -- build for gprof profiling"
    echo " PGEN=1 -- generate data for profile-guided optimization"
    echo " PUSE=1 -- use data from previous run of PGEN=1 build"
    echo " OSSL=1 -- include OpenSSL on Mac"
    echo " SSL_BOTH=1 -- include OpenSSL and Apple SSL on Mac"
    echo " NOTHREADS=1 -- disable threads"
    echo ' GCC_EXTRA="-DITER=5" -- add build flags'
    exit 1
fi

# remove previous build
rm -f $1

# build options
CPPFLAGS=""
LIBS=""
LIBDIRS=""

# default commands
[ -z "$STRIP_CMD" ] && STRIP_CMD=strip
[ -z "$GPP_CMD" ] && GPP_CMD=g++

# build flags
FLAGS="-Wall"
[ "$STRICT" = "1" ] && FLAGS="$FLAGS -Wextra"
FLAGS="$FLAGS -Wno-sign-compare -Wno-unused-parameter"

# OpenSSL
if [ "$PLATFORM" = "mac" ]; then
    # On Mac, only link with OpenSSL if OSSL is defined.
    # On other platforms, always link with OpenSSL.
    if [ "$SSL_BOTH" = "1" ]; then
	CPPFLAGS="$CPPFLAGS -DUSE_APPLE_SSL -DUSE_OPENSSL"
	LIBS="$LIBS -lcrypto -lssl -framework Security"
    else
	if [ "$OSSL" = "1" ]; then
	    CPPFLAGS="$CPPFLAGS -DUSE_OPENSSL"
	    LIBS="$LIBS -lcrypto -lssl"
	else
	    CPPFLAGS="$CPPFLAGS -DUSE_APPLE_SSL"
	    LIBS="$LIBS -framework Security"
	fi
    fi

    # Include other Mac frameworks
    # -framework CoreServices
    LIBS="$LIBS -framework CoreFoundation"
else
    CPPFLAGS="$CPPFLAGS -DUSE_OPENSSL"
    LIBS="$LIBS -lcrypto -lssl"
fi
if [ "$OPENSSL" ]; then
    CPPFLAGS="$CPPFLAGS -I$OPENSSL/include"
    LIBDIRS="$LIBDIRS -L$OPENSSL/lib"
fi

# boost
CPPFLAGS="$CPPFLAGS -I$BOOST"
LIBS="$LIBS -lboost_system"
LIBDIRS="$LIBDIRS -L$BOOST/stage/lib"
if [ "$NOTHREADS" = "1" ]; then
    CPPFLAGS="$CPPFLAGS -DBOOST_DISABLE_THREADS"
else
    LIBS="$LIBS -lboost_thread"
    FLAGS="$FLAGS -pthread"
fi

# ovpn3
CPPFLAGS="$CPPFLAGS -I$OVPN3"

# profile-guided optimization
if [ "$PGEN" = "1" ]; then
    FLAGS="$FLAGS -fprofile-generate"
elif [ "$PUSE" = "1" ]; then
    FLAGS="$FLAGS -fprofile-use"
fi

if [ "$DEBUG" = "1" ]; then
    # debug build
    CMD="$GPP_CMD -g $FLAGS $GCC_EXTRA $CPPFLAGS $LIBDIRS $1.cpp -o $1 $LIBS"
else
    # release build
    [ "$LTO" = "1" ] && FLAGS="$FLAGS -flto=4 -Wl,--no-as-needed"
    [ "$GPROF" = "1" ] && FLAGS="$FLAGS -pg"
    CMD="$GPP_CMD -O3 -fwhole-program $FLAGS $GCC_EXTRA $CPPFLAGS $LIBDIRS $1.cpp -o $1 $LIBS"
fi

# execute CMD
[ "$ECHO" = "1" ] && echo $CMD
$CMD

# maybe strip
[ "$STRIP" = "1" ] && $STRIP_CMD $1
exit 0
